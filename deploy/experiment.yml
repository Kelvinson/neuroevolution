Description: Drone task definition, ECS service, and load balancer.


Parameters:

  targetAZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The availability zone to run the experiment in.

  targetVPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to run the experiment in.

  targetCapacity:
    Type: Integer
    Default: 720
    Description: The number of worker vCPUs to run. Default is 720 (same as Uber paper).

  targetEnvironment:
    Type: String
    Default: Venture-v4
    AllowedValues:
      - Venture-v4


Mappings:

  regionMap:
    us-east-1:
      Image: ami-fad25980
    ap-southeast-2:
      Image: ami-14b55f76


Resources:

  ##############
  ### MASTER ###
  ##############

  # Security group, ingress on 8080.
  masterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: masterSecurity
      GroupDescription: Security group for the master ECS cluster.
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "8080"
          ToPort: "8080"
      VpcId: !Ref targetVPC

  # Log group for master logs.
  masterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: neuro-master-logs
      RetentionInDays: 7

  # ECS Cluster that the master is scheduled onto.
  masterCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: masterCluster

  # EC2 on-demand instance that registers itself to the master cluster.
  masterInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvdcz
          Ebs:
            VolumeSize: 22
            VolumeType: gp2
      IamInstanceProfile: ecsInstanceRole
      ImageId: !FindInMap [ regionMap, !Ref "AWS::Region", Image ]
      InstanceType: c4.large
      SecurityGroups:
        - !Ref masterSecurityGroup
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
           echo ECS_CLUSTER=${masterCluster} >> /etc/ecs/ecs.config

  # ECS Task, defines the master job to run.
  masterTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: master
      ContainerDefinitions:
        -
          Name: master
          Image: cshenton/neuro:master
          Cpu: 2048
          MemoryReservation: 3000
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref masterLogGroup
              awslogs-region: !Ref AWS::Region

  # ECS Service, schedules the single master.
  workerService:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref masterTask
      Cluster: !Ref masterCluster
      DesiredCount: 1
      Role: ecsServiceRole


  ###############
  ### WORKERS ###
  ###############

  # Security group, no ingress.
  workerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: workerSecurity
      GroupDescription: Security group for the worker ECS cluster.
      VpcId: !Ref targetVPC

  # Log group for worker logs.
  workerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: neuro-worker-logs
      RetentionInDays: 7

  # ECS Cluster that workers are scheduled onto.
  workerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: workerCluster

  # Spot Fleet request, launches c4.larges into the ECS cluster.
  workerSpotFleet:
    Type: AWS::EC2::SpotFleet
    DependsOn: workerCluster
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: aws-ec2-spot-fleet-tagging-role
        LaunchSpecifications:
          -
            IamInstanceProfile: ecsInstanceRole
            ImageId: !FindInMap [ regionMap, !Ref "AWS::Region", Image ]
            InstanceType: c4.large
            Placement:
              AvailabilityZone: !Ref targetAZ
              GroupName: workerPlacementGroup
            SecurityGroups:
              - !Ref workerSecurityGroup
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${workerCluster} >> /etc/ecs/ecs.config
            WeightedCapacity: 2
        SpotPrice: 0.035
        TargetCapacity: !Ref targetWorkers
        TerminateInstancesWithExpiration: true
        Type: maintain

  # ECS Task, defines the worker job to run.
  workerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: worker
      ContainerDefinitions:
        -
          Name: worker
          Image: cshenton/neuro:worker
          Cpu: 1024
          MemoryReservation: 1500
          Environment:
            -
              Name: ENVIRONMENT
              Value: !Ref targetEnvironment
            -
              Name: HOST_ADDRESS
              Value: !GetAtt masterInstance.PublicDnsName
            -
              Name: HOST_PORT
              Value: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref workerLogGroup
              awslogs-region: !Ref AWS::Region

  # ECS Service, schedules as many workers as the cluster can hold.
  workerService:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref workerTask
      Cluster: !Ref workerCluster
      DesiredCount: !Ref targetCapacity
      Role: ecsServiceRole
