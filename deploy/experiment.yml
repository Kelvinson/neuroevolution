Description: >
  Launches a neuroevolution master and a spot fleet of workers
  to solve the specified atari environment.


Parameters:

  targetAZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The availability zone to run the experiment in.

  targetVPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to run the experiment in.

  targetWorkers:
    Type: Number
    Default: 180
    Description: >
      The number of worker cpu cores. This will be 1/2 the number of underlying
      vCPUs (which are just hyperthreads). This defaults to 180, since that is the
      maximum number of discrete spot market CPU cores one can provision without
      an increased allowance through AWS support, this is 1/4 of the discrete cores
      used in the Uber paper.

      Should be a multiple of 36, since large machines are provisioned.

  targetEnvironment:
    Type: String
    Default: Venture-v4


Mappings:

  regionMap:
    us-east-2:
      Image: ami-64300001
    us-east-1:
      Image: ami-aff65ad2
    us-west-2:
      Image: ami-40ddb938
    us-west-1:
      Image: ami-69677709
    eu-west-3:
      Image: ami-250eb858
    eu-west-2:
      Image: ami-2218f945
    eu-west-1:
      Image: ami-2d386654
    eu-central-1:
      Image: ami-9fc39c74
    ap-northeast-2:
      Image: ami-9d56f9f3
    ap-northeast-1:
      Image: ami-a99d8ad5
    ap-southeast-2:
      Image: ami-efda148d
    ap-southeast-1:
      Image: ami-846144f8
    ca-central-1:
      Image: ami-897ff9ed
    ap-south-1:
      Image: ami-72edc81d
    sa-east-1:
      Image: ami-4a7e2826


Resources:

  # IAM role for managing spot fleet
  iamSpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "spotfleet.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      RoleName: iamSpotFleetRole

  # IAM role for regisering ECS instances
  iamEcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      RoleName: iamEcsInstanceRole

  # Instance profile for spot fleet
  iamEcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: iamEcsInstanceProfile
      Roles:
        - !Ref iamEcsInstanceRole


  ##############
  ### MASTER ###
  ##############

  # Security group, ingress on 8080.
  masterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: masterSecurityGroup
      GroupDescription: Security group for the master ECS cluster.
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref targetVPC

  # Log group for master logs.
  masterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: neuro-master-logs
      RetentionInDays: 7

  # ECS Cluster that the master is scheduled onto.
  masterCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: masterCluster

  # EC2 on-demand instance that registers itself to the master cluster.
  masterInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref targetAZ
      IamInstanceProfile: !Ref iamEcsInstanceProfile
      ImageId: !FindInMap [ regionMap, !Ref "AWS::Region", Image ]
      InstanceType: c5.large
      SecurityGroupIds:
        - !Ref masterSecurityGroup
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
           echo ECS_CLUSTER=${masterCluster} >> /etc/ecs/ecs.config

  # ECS Task, defines the master job to run.
  masterTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: master
      ContainerDefinitions:
        -
          Name: master
          Image: cshenton/neuro:master
          MemoryReservation: 3000
          PortMappings:
            -
              ContainerPort: 8080
              HostPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref masterLogGroup
              awslogs-region: !Ref AWS::Region

  # ECS Service, schedules the single master.
  masterService:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref masterTask
      Cluster: !Ref masterCluster
      DesiredCount: 1


  ###############
  ### WORKERS ###
  ###############

  # Security group, no ingress.
  workerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: workerSecurityGroup
      GroupDescription: Security group for the worker ECS cluster.
      VpcId: !Ref targetVPC

  # Log group for worker logs.
  workerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: neuro-worker-logs
      RetentionInDays: 7

  # ECS Cluster that workers are scheduled onto.
  workerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: workerCluster

  # Spot Fleet request, launches c5.18xlarges into the ECS cluster. Also disables hyperthreading
  # on startup, since we don't want contention over the single floating point cores.
  workerSpotFleet:
    Type: AWS::EC2::SpotFleet
    DependsOn: masterService
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt iamSpotFleetRole.Arn
        LaunchSpecifications:
          -
            IamInstanceProfile:
              Arn: !GetAtt iamEcsInstanceProfile.Arn
            ImageId: !FindInMap [ regionMap, !Ref "AWS::Region", Image ]
            InstanceType: c5.18xlarge
            SecurityGroups:
              -
                GroupId: !Ref workerSecurityGroup
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${workerCluster} >> /etc/ecs/ecs.config
                for cpunum in $(cat /sys/devices/system/cpu/cpu*/topology/thread_siblings_list | cut -s -d, -f2- | tr ',' '\n' | sort -un)
                do
                  echo 0 > /sys/devices/system/cpu/cpu$cpunum/online
                done
            WeightedCapacity: 36
        SpotPrice: '0.04'
        TargetCapacity: !Ref targetWorkers
        TerminateInstancesWithExpiration: true
        Type: maintain

  # ECS Task, defines the worker job to run.
  workerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: worker
      ContainerDefinitions:
        -
          Name: worker
          Image: cshenton/neuro:worker
          MemoryReservation: 750
          Environment:
            -
              Name: ENVIRONMENT
              Value: !Ref targetEnvironment
            -
              Name: HOST_ADDRESS
              Value: !GetAtt masterInstance.PublicDnsName
            -
              Name: HOST_PORT
              Value: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref workerLogGroup
              awslogs-region: !Ref AWS::Region

  # ECS Service, schedules as many workers as the cluster can hold.
  workerService:
    Type: AWS::ECS::Service
    DependsOn: masterService
    Properties:
      TaskDefinition: !Ref workerTask
      Cluster: !Ref workerCluster
      DesiredCount: !Ref targetWorkers
