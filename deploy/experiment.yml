Description: >
  Launches a neuroevolution master and a spot fleet of workers
  to solve the specified atari environment.


Parameters:

  targetAZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The availability zone to run the experiment in.

  targetVPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to run the experiment in.

  targetWorkers:
    Type: Number
    Default: 720
    Description: >
      The number of worker vCPUs to run. Default is 720 (same as Uber paper).
      Should be a multiple of 36, since large machines are provisioned.

  targetEnvironment:
    Type: String
    Default: Venture-v4
    AllowedValues:
      - Venture-v4


Mappings:

  regionMap:
    us-east-1:
      Image: ami-fad25980
    ap-southeast-2:
      Image: ami-14b55f76


Resources:

  # IAM role for managing spot fleet
  iamSpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "spotfleet.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      RoleName: iamSpotFleetRole

  # IAM role for regisering ECS instances
  iamEcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      RoleName: iamEcsInstanceRole

  iamEcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: iamEcsInstanceProfile
      Roles:
        - !Ref iamEcsInstanceRole


  ##############
  ### MASTER ###
  ##############

  # Security group, ingress on 8080.
  masterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: masterSecurityGroup
      GroupDescription: Security group for the master ECS cluster.
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref targetVPC

  # Log group for master logs.
  masterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: neuro-master-logs
      RetentionInDays: 7

  # ECS Cluster that the master is scheduled onto.
  masterCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: masterCluster

  # EC2 on-demand instance that registers itself to the master cluster.
  masterInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref targetAZ
      IamInstanceProfile: !Ref iamEcsInstanceProfile
      ImageId: !FindInMap [ regionMap, !Ref "AWS::Region", Image ]
      InstanceType: c4.large
      SecurityGroupIds:
        - !Ref masterSecurityGroup
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
           echo ECS_CLUSTER=${masterCluster} >> /etc/ecs/ecs.config

  # ECS Task, defines the master job to run.
  masterTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: master
      ContainerDefinitions:
        -
          Name: master
          Image: cshenton/neuro:master
          Cpu: 2048
          MemoryReservation: 3000
          PortMappings:
            -
              ContainerPort: 8080
              HostPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref masterLogGroup
              awslogs-region: !Ref AWS::Region

  # ECS Service, schedules the single master.
  masterService:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref masterTask
      Cluster: !Ref masterCluster
      DesiredCount: 1


  ###############
  ### WORKERS ###
  ###############

  # Security group, no ingress.
  workerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: workerSecurityGroup
      GroupDescription: Security group for the worker ECS cluster.
      VpcId: !Ref targetVPC

  # Log group for worker logs.
  workerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: neuro-worker-logs
      RetentionInDays: 7

  # ECS Cluster that workers are scheduled onto.
  workerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: workerCluster

  # Spot Fleet request, launches c5 9x and 18x larges into the ECS cluster.
  workerSpotFleet:
    Type: AWS::EC2::SpotFleet
    DependsOn: masterService
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt iamSpotFleetRole.Arn
        LaunchSpecifications:
          -
            IamInstanceProfile:
              Arn: !GetAtt iamEcsInstanceProfile.Arn
            ImageId: !FindInMap [ regionMap, !Ref "AWS::Region", Image ]
            InstanceType: c5.9xlarge
            SecurityGroups:
              -
                GroupId: !Ref workerSecurityGroup
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${workerCluster} >> /etc/ecs/ecs.config
            WeightedCapacity: 36
          -
            IamInstanceProfile:
              Arn: !GetAtt iamEcsInstanceProfile.Arn
            ImageId: !FindInMap [ regionMap, !Ref "AWS::Region", Image ]
            InstanceType: c5.18xlarge
            SecurityGroups:
              -
                GroupId: !Ref workerSecurityGroup
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${workerCluster} >> /etc/ecs/ecs.config
            WeightedCapacity: 72
        SpotPrice: '0.02'
        TargetCapacity: !Ref targetWorkers
        TerminateInstancesWithExpiration: true
        Type: maintain

  # ECS Task, defines the worker job to run.
  workerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: worker
      ContainerDefinitions:
        -
          Name: worker
          Image: cshenton/neuro:worker
          Cpu: 1024
          MemoryReservation: 1500
          Environment:
            -
              Name: ENVIRONMENT
              Value: !Ref targetEnvironment
            -
              Name: HOST_ADDRESS
              Value: !GetAtt masterInstance.PublicDnsName
            -
              Name: HOST_PORT
              Value: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref workerLogGroup
              awslogs-region: !Ref AWS::Region

  # ECS Service, schedules as many workers as the cluster can hold.
  workerService:
    Type: AWS::ECS::Service
    DependsOn: masterService
    Properties:
      TaskDefinition: !Ref workerTask
      Cluster: !Ref workerCluster
      DesiredCount: !Ref targetWorkers
