// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/neuroevolution.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/neuroevolution.proto

It has these top-level messages:
	Individual
	Evaluation
	Top
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Individual is a sequence of random seeds used to generate a candidate network.
type Individual struct {
	Seeds []uint32 `protobuf:"varint,1,rep,packed,name=seeds" json:"seeds,omitempty"`
}

func (m *Individual) Reset()                    { *m = Individual{} }
func (m *Individual) String() string            { return proto1.CompactTextString(m) }
func (*Individual) ProtoMessage()               {}
func (*Individual) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Individual) GetSeeds() []uint32 {
	if m != nil {
		return m.Seeds
	}
	return nil
}

// Evaluation is an individual and the score that indivual achieved.
type Evaluation struct {
	Individual *Individual `protobuf:"bytes,1,opt,name=individual" json:"individual,omitempty"`
	Score      float64     `protobuf:"fixed64,2,opt,name=score" json:"score,omitempty"`
}

func (m *Evaluation) Reset()                    { *m = Evaluation{} }
func (m *Evaluation) String() string            { return proto1.CompactTextString(m) }
func (*Evaluation) ProtoMessage()               {}
func (*Evaluation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Evaluation) GetIndividual() *Individual {
	if m != nil {
		return m.Individual
	}
	return nil
}

func (m *Evaluation) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type Top struct {
	TopIndividual *Individual `protobuf:"bytes,1,opt,name=top_individual,json=topIndividual" json:"top_individual,omitempty"`
	TopScore      float64     `protobuf:"fixed64,2,opt,name=top_score,json=topScore" json:"top_score,omitempty"`
	NumIter       int32       `protobuf:"varint,3,opt,name=num_iter,json=numIter" json:"num_iter,omitempty"`
}

func (m *Top) Reset()                    { *m = Top{} }
func (m *Top) String() string            { return proto1.CompactTextString(m) }
func (*Top) ProtoMessage()               {}
func (*Top) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Top) GetTopIndividual() *Individual {
	if m != nil {
		return m.TopIndividual
	}
	return nil
}

func (m *Top) GetTopScore() float64 {
	if m != nil {
		return m.TopScore
	}
	return 0
}

func (m *Top) GetNumIter() int32 {
	if m != nil {
		return m.NumIter
	}
	return 0
}

func init() {
	proto1.RegisterType((*Individual)(nil), "neuroevolution.Individual")
	proto1.RegisterType((*Evaluation)(nil), "neuroevolution.Evaluation")
	proto1.RegisterType((*Top)(nil), "neuroevolution.Top")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Neuro service

type NeuroClient interface {
	// Seek returns a new individual to test.
	Seek(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Individual, error)
	// Show shows the performance of an individual to the server.
	Show(ctx context.Context, in *Evaluation, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Status shows the number of evaluations run, as well as the top individual
	Status(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Top, error)
}

type neuroClient struct {
	cc *grpc.ClientConn
}

func NewNeuroClient(cc *grpc.ClientConn) NeuroClient {
	return &neuroClient{cc}
}

func (c *neuroClient) Seek(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Individual, error) {
	out := new(Individual)
	err := grpc.Invoke(ctx, "/neuroevolution.Neuro/Seek", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuroClient) Show(ctx context.Context, in *Evaluation, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/neuroevolution.Neuro/Show", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuroClient) Status(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Top, error) {
	out := new(Top)
	err := grpc.Invoke(ctx, "/neuroevolution.Neuro/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Neuro service

type NeuroServer interface {
	// Seek returns a new individual to test.
	Seek(context.Context, *google_protobuf.Empty) (*Individual, error)
	// Show shows the performance of an individual to the server.
	Show(context.Context, *Evaluation) (*google_protobuf.Empty, error)
	// Status shows the number of evaluations run, as well as the top individual
	Status(context.Context, *google_protobuf.Empty) (*Top, error)
}

func RegisterNeuroServer(s *grpc.Server, srv NeuroServer) {
	s.RegisterService(&_Neuro_serviceDesc, srv)
}

func _Neuro_Seek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroServer).Seek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neuroevolution.Neuro/Seek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroServer).Seek(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Neuro_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Evaluation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neuroevolution.Neuro/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroServer).Show(ctx, req.(*Evaluation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Neuro_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neuroevolution.Neuro/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroServer).Status(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Neuro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "neuroevolution.Neuro",
	HandlerType: (*NeuroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Seek",
			Handler:    _Neuro_Seek_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _Neuro_Show_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Neuro_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/neuroevolution.proto",
}

func init() { proto1.RegisterFile("proto/neuroevolution.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x90, 0xb1, 0x4f, 0x83, 0x40,
	0x14, 0xc6, 0x39, 0x91, 0xb6, 0x3e, 0xd3, 0x0e, 0xa7, 0x31, 0x48, 0x17, 0x72, 0x13, 0x13, 0x24,
	0x75, 0x30, 0x31, 0x2e, 0x9a, 0x74, 0xe8, 0xe2, 0x00, 0x9d, 0x1c, 0x6c, 0x50, 0x9e, 0x95, 0x08,
	0xbc, 0x0b, 0xdc, 0x61, 0xdc, 0xfc, 0xc3, 0xfc, 0xe3, 0x0c, 0x10, 0x2d, 0xd6, 0xd4, 0xa4, 0x13,
	0xf9, 0x1e, 0xdf, 0xfb, 0x7d, 0xef, 0x3e, 0x70, 0x64, 0x49, 0x8a, 0x82, 0x02, 0x75, 0x49, 0x58,
	0x53, 0xa6, 0x55, 0x4a, 0x85, 0xdf, 0x0e, 0xf9, 0xe4, 0xf7, 0xd4, 0x99, 0xae, 0x89, 0xd6, 0x19,
	0x06, 0xed, 0xdf, 0x47, 0xfd, 0x1c, 0x60, 0x2e, 0xd5, 0x7b, 0x67, 0x16, 0x02, 0x60, 0x51, 0x24,
	0x69, 0x9d, 0x26, 0x3a, 0xce, 0xf8, 0x29, 0x58, 0x15, 0x62, 0x52, 0xd9, 0xcc, 0x35, 0xbd, 0x71,
	0xd8, 0x09, 0xf1, 0x00, 0x30, 0xaf, 0xe3, 0x4c, 0xc7, 0x0d, 0x8e, 0x5f, 0x01, 0xa4, 0x3f, 0x1b,
	0x36, 0x73, 0x99, 0x77, 0x3c, 0x73, 0xfc, 0xad, 0x4b, 0x36, 0xcc, 0xb0, 0xe7, 0x6e, 0xf9, 0x4f,
	0x54, 0xa2, 0x7d, 0xe0, 0x32, 0x8f, 0x85, 0x9d, 0x10, 0x1f, 0x0c, 0xcc, 0x25, 0x49, 0x7e, 0x03,
	0x13, 0x45, 0x72, 0xb5, 0x17, 0x7d, 0xac, 0x48, 0xf6, 0x1e, 0x30, 0x85, 0xa3, 0x06, 0xd1, 0x0f,
	0x19, 0x29, 0x92, 0x51, 0xa3, 0xf9, 0x39, 0x8c, 0x0a, 0x9d, 0xaf, 0x52, 0x85, 0xa5, 0x6d, 0xba,
	0xcc, 0xb3, 0xc2, 0x61, 0xa1, 0xf3, 0x85, 0xc2, 0x72, 0xf6, 0xc9, 0xc0, 0xba, 0x6b, 0x42, 0xf8,
	0x35, 0x1c, 0x46, 0x88, 0xaf, 0xfc, 0xcc, 0xef, 0x6a, 0xf3, 0xbf, 0x6b, 0xf3, 0xe7, 0x4d, 0x6d,
	0xce, 0x3f, 0xc7, 0x08, 0xa3, 0xdd, 0x7e, 0xa1, 0x37, 0xfe, 0xc7, 0xb5, 0x29, 0xd0, 0xd9, 0x41,
	0x16, 0x06, 0xbf, 0x84, 0x41, 0xa4, 0x62, 0xa5, 0xab, 0x9d, 0xe9, 0x27, 0xdb, 0xdc, 0x25, 0x49,
	0x61, 0xdc, 0x0e, 0xef, 0xad, 0xce, 0x38, 0x68, 0x3f, 0x17, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x79, 0x9c, 0xc4, 0xbe, 0x20, 0x02, 0x00, 0x00,
}
